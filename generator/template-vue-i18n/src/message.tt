<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="<%= options.nameSpace %>" #>
<#@ output extension=".json" encoding="utf-8"#>
<# 
  Languages = new [] { 
      <% for(var i=0; i<options.locales.length; i++) {%>"<%= options.locales[i] %>"<% if (i< options.locales.length-1) { %>, <% } %><% } %>
  };
  Resources = new []{"<%= options.resourceFileName %>"};
#>
{
 <# var first = true;
 PushIndent("    ");
 foreach (var language in Languages) {
	if (!first){
		WriteLine("},");
	}
	first =false;
	WriteLine($@"""{language}"":{{");
	PushIndent("    ");
	var last = Resources.Last();
	foreach(var resource in Resources){
		WriteLine($@"""{resource.ToLower()}"":{{");
		PushIndent("    ");
		var dic = GetDictionary(resource, language);
		DisplayDictionary(dic);
		PopIndent();
		var closing =  (last == resource)? "}" : "},";
		WriteLine(closing);
	}
	PopIndent();
 } 
 WriteLine("}");
 PopIndent();
 #>
}
<#+
private string[] Languages;

private string[] Resources;

private void DisplayDictionary(IDictionary<string,string> dictionary){
	var first = true;
	foreach(var entry in dictionary){
		if (!first){
			WriteLine(",");
		}
		first = false;
		Write($@"""{entry.Key}"":""{entry.Value}""");
	}
	WriteLine("");
}

private IDictionary<string,string> GetDictionary(string resourceName, string language){
	var asm = typeof(App).Assembly;
	var resourceManager = new ResourceManager("<%= options.nameSpace %>." + resourceName, asm);
	var rs = resourceManager.GetResourceSet(new CultureInfo(language), true, true);
	return rs.Cast<DictionaryEntry>().OrderBy(entry =>entry.Key).ToDictionary(dicEntry => (string)dicEntry.Key, dicEntry => (string)dicEntry.Value);            
}
#>